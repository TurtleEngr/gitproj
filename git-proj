#!/bin/bash

fUsage()
{
	cat <<EOF
git proj This help

The proj git subcommand supports using git repo for versioning files to
locally mounted external drives.

gitproj also supports the issue with large
binary files causing git repo "bloat". Large files are not versioned,
they are only copied. So if a version important, just rename the file.
(symlinks are used and versioned to point to the large binary files.)

This is a much simpler implementation than git-lfs for managing the
versioning of large binary files. Since the large files are not
versioned, i.e. only the last version is saved, this is a comompromize
on having "perfect" version control of the files. The main inspiration
for the proj tool came from the need to versioning video
projects. Video files are HUGE, yet they don't change much. Since most
video files are rendered from files that do not change, it is only
important to version the video editor's file, if you need to recreate
a particular video file version.

git proj

    This help

git proj init [-l [pDirPath]] [-e pDirPath] [-r [pDirPath]

    -l intialize a local git repo in pDirPath. If pDirPath is not
       specified then $PWD will be used. The git repo will be named
       after the last directory in pDirPath.
       
    -e export the git repo to an external drive (or another local dir)
       This is usually the removable drive's "top" directory.  Ideally
       the top directory should be different across a set of drives,
       so that the local "origin" can be used to make sure the proper
       git repo is round on the drive. "origin" will be set to
       $pDirPath
       
    -r define the "raw" file dir for files that will not be versioned.
       If pDirPath is not specified, then
       [top_git_dir]/../[git_dir_name].raw will be used. In
       [top_git_dir] this symlink will be created:
       raw->../[git_dir_name].raw

    (git-proj-init, proj-init-local, proj-init-remote, proj-init-raw)

git proj get pExternalPath

    Clone a local git repo from the external pDirPath.
    (git-proj-get, proj-get-local)

git proj add pFilePath

    Copy pFilePath to [top_git_dir]/raw dir. The path will be
    duplicated (with ln) in [top_git_dir]/raw dir and the file will
    remove and a symlink will be made to [top_git_dir]/raw dir
    location. Files can also be manually put in the "raw" symlink
    directory, then used from there directly or with symlinks to that
    directory. Do not link to, or reference files with the actual raw
    directory location, because the raw symlink could be changed to a
    new location.

    Note: the files do not need to be binary.

git proj push [-b]

    rsync will be used top copy the ../[git_dir_name].raw files to
    ../"origin". If the -b option is given then run:
    "git push origin [current-branch]"

    (git-proj-push, proj-push-raw)
    
git proj pull [-b]

    Use this command to pull (or copy), the "raw" files from
    ../"origin"/[git_dir_name].raw to [top_git_dir]/../[git_dir_name].raw
    If the -b option is given then run: "git pull origin [current-branch]"

    (git-proj-pull, proj-pull-raw)

git proj set [-l pExternalPath] [-e pRawPath]

    Define or redefine the gitproj options.
    
    -l pExternalPath
    
       If the external repo is mounted at a different path than the
       original "origin", then use this command to set the origin to
       the new mount point.  (git-proj-set, proj-set-origin)

    -e pRawPath

       Redefine the location of the local raw file dir. The "raw"
       symlink will be updated.

    -c on/off
    
       Set a commit hook to not allow commits for "large" binary files.

    -s pMaxSize
    
       Set the max size for commits of binary files.

git proj status [-v]

    Verify origin is set to a path that exists.
    Verify the raw symlink points a directory.
    Verify the origin raw dir exists (assumes at least one push)
    Give a "diff" of the raw files, local vs external.
    if -v, show all the config settings.

EOF
}
