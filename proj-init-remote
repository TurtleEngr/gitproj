#!/bin/bash

#--------------------
fUsage()
{
	cat <<EOF
Usage:
	proj-new-remote pPath
	
Description
	After adding and committing files, run this script to copy
	this git repo to a mounted drive (or to another local
	directory).

	A mounted drive should have top directory that is different
	from other drives so that the repo can be found with it's
	"origin" name.

Example
	With a mount point: /mnt/usb-video create the remote git at
	the top directory video-2019-04-01, with:

	proj-new-remote /mnt/usb-video/video-2019-04-01
EOF
	exit 1
}

# --------------------
fCheckForGit()
{
	if [ ! -d .git ]; then
		cat <<EOF
Error: .git not found in current directory. cd to directory with .git
in it, or use proj-new-local to create a new local repo.
EOF
		exit 1
	fi
}

# --------------------
fCheckPath()
{
	local pPath=$1

	local tName=${PWD##*/}

	if [ ! -d $pPath ]; then
		echo "Error: Could not find: $pPath"
		exit 1
	fi
	if [ ! -w $pPath ]; then
		echo "Error: $pPath is not writable for you."
		exit 1
	fi
	if [ -e $pPath/$tName.git ]; then
		echo "Error: $pPath/$tName.git already exists."
		exit 1
	fi
}

fCheckSpace()
{
	local pPath=$1

	local tAvail
	local tGitSize

	tAvail=$(df -BM $pPath --output=avail | tail -n1)
	tAvail=${tAvail%M}

	tGitSize=$(du -sm .git | awk '{print $1}')
	let tGitSize*=2

	if [ $tGitSize -gt $tAvail ]; then
		echo "Error: There is not enough space at $pPath"
		echo "$pPath has ${tAvail}MB"
		echo ".git needs ${tGitSize}MB"
		exit 1
	fi
}

# --------------------
fCreateRemote()
{
	local pPath=$1

	local tSrcPath=$PWD
	local tProjName=${PWD##*/}

	set -x
	cd $pPath &>/dev/null
	git clone --bare --local --no-hardlinks --progress -v $tSrcPath/.git
	cd - &>/dev/null
	git remote add origin $pPath/$tProjName.git
	set +x
}

fReport()
{
	echo 'Remote origin is now set to:'
	git $cOrigin
	cat <<EOF
Be sure the disk is mounted and $gpPath exists.
Then you can use: "git push origin develop"
If the mount path is changed, use proj-remote-location update origin.
EOF
}

# ====================
# Main

if [ $# -ne 1 ]; then
	fUsage
fi

gpPath=$1

export cOrigin='config --get remote.origin.url'

fCheckForGit
fCheckPath $gpPath
fCheckSpace $gpPath
fCreateRemote $gpPath
fReport

exit 0
