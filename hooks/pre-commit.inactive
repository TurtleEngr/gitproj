#!/bin/sh
# To enable this hook, rename this file to "pre-commit".

local tAgainst
local tCheckBigFiles
local tCheckFileNames
local tEnabled
local tErr=0
local tFile
local tMaxSize
local tSize
local tTest

# Redirect output to stderr.
exec 1>&2

tEnabled=$(git config --get --bool gitproj.hook.pre-commit-enabled)
if "$tEnabled" != "true" ]; then
    exit 0
fi

tCheckBigFiles=$(git config --get --bool gitproj.hook.check-for-big-files)
tCheckFileNames=$(git config --get --bool gitproj.hook.check-file-names)

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    tAgainst=HEAD
else
    # Initial commit: diff against an empty tree object
    tAgainst=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if [ "$tCheckBigFiles" = "true" ]; then
    # To detect binary files, we exploit the fact that the printable
    # range starts at the space character and ends with tilde.
tMaxSize=$(git config --get --int gitproj.hook.binary-file-size-limit)
LC_ALL=C
for tFile in $(git diff --cached --name-only --diff-filter=A -z $tAgainst); do
    if [ $(tr -d '[ -~]\0' <$tFile | wc -c) != 0 ]; then
        tSize=$(ls -l $tFile | awk '{print $5}')
        if [ $tSize -gt $tMaxSize ]; then
	    tErr=1
	    echo "Error: tFile size $tSize > $tMaxSize"
            git reset HEAD $tFile
        fi
    fi
done
if [ $tErr -ne 0 ]; then
    echo "Error: Large binary files should not be committed:"
    echo 'Use "git proj add FILE" to save the files to the "raw" remote.'
    echo "Or change config gitproj.hook.binary-file-size-limit to be larger."
fi

if [ "$tCheckFileNames" = "true" ]; then
    for tFile in $(git diff --cached --name-only --diff-filter=A -z $tAgainst); do
        tTest=$(echo $tFile | perl -ne '
	    tr/-_.a-zA-Z0-9/x/cs;
	    s/-+/-/g;
	    s/\.+/\./g;
	    s/_+/_/;
	    print
	')
	if [ "$tTest" != "$tFile" ]; then
	    tErr=2
	    echo "Error: Invalid file name: \"$tFile\""
	fi
    done
fi
if [ $tErr -ne 0 ]; then
    echo "Invalid file names were found. Names can only use letters"
    echo "numbers, hypen, dash, and periods."
fi

if [ $tErr -ne 0 ]; then
    exit $tErr
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $tAgainst --
