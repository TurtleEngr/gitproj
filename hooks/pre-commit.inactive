#!/bin/sh
# To enable this hook, rename this file to "pre-commit".

local tAgainst
local tBigFiles
local tEnabled
local tFile
local tMaxSize
local tSize

# Redirect output to stderr.
exec 1>&2

tEnabled=$(git config --get --bool gitproj.hook.pre-commit-enabled)
if [ -z "$tEnabled" ] || [ "$tEnabled" = "false" ]; then
   exit 0
fi
tMaxSize=$(git config --get --int gitproj.hook.binary-file-size-limit)

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    tAgainst=HEAD
else
    # Initial commit: diff against an empty tree object
    tAgainst=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# To detect binary files, we exploit the fact that the printable range
# starts at the space character and ends with tilde.
tBigFiles=""
LC_ALL=C
for tFile in $(git diff --cached --name-only --diff-filter=A -z $tAgainst); do
    if [ $(tr -d '[ -~]\0' <$tFile | wc -c) != 0 ]; then
       tSize=$(ls -l $tFile | awk '{print $5}')
       if [ $tSize -gt $tMaxSize ]; then
       	  tBigFiles="$tBigFiles $tFile"
	  git reset HEAD $tFile
       fi
    fi
done
if [ -n "$tBigFiles" ]; then
   echo "Error: The following large binary files should not be committed:"
   echo $tBigFiles | fmt
   echo 'Use "git proj add FILE" to save the files to the "raw" remote.'
   echo "Or change config gitproj.hook.binary-file-size-limit to be larger."
   echo "The current size is: $tMaxSize bytes."
   exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $tAgainst --
