#!/bin/bash

export gpCmdName gpBin cCurDir

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-remote -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj remote

=head1 SYNOPSIS

    git proj remote [-a] -d pMountDir [-r pRawRemoteDir ]
    	            [-s pMinSpace] [-h]
        Defaults: [-r pMountDir/NAME.raw]

=head1 DESCRIPTION

This will create a remote git repo on an external drive.

(Future versions may support repos on remote computers, where you have
rsync access.)

=head1 OPTIONS

=over 4

=item B<-d pMountDir>

Export the git repo to an external drive (or another local dir) This
is usually the removable drive's "top" directory.  Ideally the top
directory should be different across a set of external drives, so that the
local "origin" can be used to make sure the proper git repo is found
on the drive. "origin" will be set to $pMountDir/ProjName.git

After adding and committing files, run this script to copy this git
repo to a mounted drive (or to another local directory).

A mounted drive should have top directory that is different from other
drives so that the repo can be found with it's "origin" name.

For example, with a mount point: /mnt/usb-video create the remote git
at the top directory video-2019-04-01, with:

 git proj init -e /mnt/usb-video/video-2019-04-01

=item B<-r pRawRemoteDir>

        Default: [-r pMountDir/ProjName.raw]

=item B<-s pMinSpace>

This is the minium space that should be available on the external
drive.  The command will not continue if there is not enough space.
The available space must also be twice the size of the space used by
ProjName.raw.

Default: 20g

=item B<-h>

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj init
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj config
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
    exit 1
} # fUsage

# ========================================
# Main

export cCurDir gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD and cCurDir
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi
cCurDir=$PWD

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

if [ $# -eq 0 ]; then
    fError -m "Missing options." -l $tSrc:$LINENO
fi

. $gpBin/gitproj-remote.inc
fRemoteSetGlobals

#    git proj remote [-a] [-d pMountDir] [-r pRawRemoteDir ]
#    	            [-s pMinSpace] [-h]
#        Defaults: [-r pMountDir/NAME.raw]

gpMountDir=""
while getopts :al:r:s:hH:vx tArg; do
    case $tArg in
        # Script arguments
        a) gpAuto=1 ;;
	d) gpMountDir="$OPTARG" ;;
        r) gpRawRemoteDir="$OPTARG" ;;
        s) gpRemoteMinSpace="$OPTARG" ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        v) let ++gpVerbose ;;
        x) let ++gpDebug ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi
if [ $gpAuto -ne 0 ] && [ -z "$gpMountDir" ]; then
    fError -m "If -a, -d pMountDir is required." -l $tSrc:$LINENO
fi

# ----------
fRemoteCreateRemoteGit $gpMountDir
exit 0
