#!/bin/bash

export gpCmdName gpBin

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-remote -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj remote

=head1 SYNOPSIS

    git proj remote [-a] [-d pMountDir] [common-options]

=head1 DESCRIPTION

This will create a remote git repo on an external drive.

(Future versions may support repos on remote computers, where you have
rsync access.)

=head1 OPTIONS

=over 4

=item B<-d pMountDir>

This command is run after "git proj init" to setup a remote location.
After this is setup, "git proj push" and "git proj pull" can be used
to push/pull git and raw file changes.

Export the git repo to an external drive (or another local dir) This
is usually the removable drive's "top" directory.  Ideally the top
directory should be different across a set of external drives, so that
the local "origin" can be used to make sure the proper git repo is
found on the drive. The git "origin" will be set to
pMountDir/ProjName.git And "remote-raw-origin" will be set to
pMountDir/ProjName.raw

=item B<[common-options]>

 -h                     (-H text)
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)
 -y | -n                (only used with -a option)

Run "git proj -h" for details.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj init
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj config
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
    exit 1
} # fUsage

# ========================================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

tSrc=${BASH_SOURCE##*/}
if ! fComMustBeInProjRepo $PWD; then
    fError -m "Quitting" -l $tSrc:$LINENO
fi

. $gpBin/gitproj-remote.inc
fRemoteSetGlobals

tSrc=${BASH_SOURCE##*/}
export pMountDir=""
gpYesNo=n
while getopts :ad:hH:vxyn tArg; do
    case $tArg in
        # Script arguments
        a) gpAuto=1 ;;
        d) pMountDir="$OPTARG" ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        v) let ++gpVerbose ;;
        x) let ++gpDebug ;;
        y) gpYesNo=y ;;
        n) gpYesNo=n ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

# ----------
fRemoteCreateRemoteGit $pMountDir
exit 0
