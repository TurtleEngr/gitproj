#!/bin/bash

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-clone -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj clone

=head1 SYNOPSIS

    git proj clone -d pRemoteDir [-a] [-y|-n] [common-options]

=head1 DESCRIPTION

Clone a local git repo from the external pRemoteDir.

Use this script get a local copy of the remote git repo frome a
mounted drive.

=head1 OPTIONS

=over 4

=item B<-d pRemoteDir>

TBD

=item B<-a>

Automated mode. Use this in batch (non-interactve) scripts. See the
-y|-n options.

=item B<-y|-n>

These are only used if -a option is defined. Where there are
"exceptions" these will be used for the default answer: -y continue,
-n quit.

=item B<[common-options]>

 -h
 -H pStyle
 -v, -vv
 -x, -xx

Run "git proj -h"  for details.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=head1 EXAMPLES

The drive is mounted at: /mnt/usb-video and the the repo is
at: video-2019-04-01/trip.git So use this to get a local copy.

proj-get-local -d /mnt/usb-video/video-2019-04-01/trip.git

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj remote
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj set
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut
EOF
    exit 1
} # fUsage

# ========================================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

. $gpBin/gitproj-clone.inc
# Calls: fCloneSetGlobals

gpRemoteGitDir=""
gpAuto=0
gpYesNo="No"
while getopts :ad:nyhH:qvV:xX: tArg; do
    case $tArg in
        # Script arguments
	a)
	    gpAuto=1
	    fError -m "-a is not implemented yet." -l $tSrc:$LINENO
	    ;;
        d)
            gpRemoteGitDir="$OPTARG"
            gpRemoteRawOrigin=${gpRemoteGitDir%.git}.raw
            gpProjName=${gpRemoteGitDir##*/}
            gpProjName=${gpProjName%.git}
            ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        q) gpVerbose=0 ;;
        v) gpVerbose=2 ;;
        V) gpVerbose=$OPTARG ;;
        x) let ++gpDebug ;;
        X) gpDebug=$OPTARG ;;
        n) gpYesNo=No ;;
        y) gpYesNo=Yes ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi
if [ -z "$gpRemoteGitDir" ]; then
    fError -m "-d pRemoteDir option is required." -l $tSrc:$LINENO
fi

# ----------
fCloneFromRemoteDir
exit 0
