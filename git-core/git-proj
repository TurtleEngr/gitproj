#!/bin/bash

export gpCmdName gpBin

fUsage()
{
    # Quick help, run this:
    # git-proj -h | less

    local pStyle="${1:-usage}"

    local tFileList="\
        -f $gpBin/git-proj \
        -f $gpBin/git-proj-init \
        -f $gpBin/git-proj-remote \
        -f $gpBin/git-proj-clone \
        -f $gpBin/git-proj-push \
        -f $gpBin/git-proj-pull \
        -f $gpBin/git-proj-status \
        "
    tFileList="$(echo $tFileList)"

    #-f $gpBin/git-proj-config \
    #-f $gpBin/git-proj-add \
    #-f $gpBin/git-proj-rm \
    #-f $gpBin/git-proj-check \

    local tIntFileList="\
        $tFileList \
        -f $gpBin/gitproj-com.inc \
        -f $gpBin/gitproj-init.inc \
        -f $gpBin/gitproj-remote.inc \
        -f $gpBin/gitproj-clone.inc \
        -f $gpBin/gitproj-pull.inc \
        -f $gpBin/gitproj-push.inc \
        -f $gpBin/gitproj-status.inc \
    "
    tIntFileList="$(echo $tIntFileList)"

    case $pStyle in
        short | usage | man)
            fComUsage -s $pStyle -f $gpBin/git-proj
            ;;
        long | text | md)
            fComUsage -s $pStyle $tFileList
            ;;
        html)
            fComUsage -s $pStyle -t "git proj Usage" $tFileList
            ;;
        int)
            fComUsage -i -s long $tIntFileList
            ;;
        int-html)
            fComUsage -i -s html -t "$gpCmdName Internal Doc" $tIntFileList
            ;;
        int-md)
            fComUsage -i -s md $tIntFileList
            ;;
        *)
            fComUsage -s usage -f $gpBin/$gpCmdName
            ;;
    esac
    exit 1

    cat <<\EOF >/dev/null
=pod

=head1 NAME git proj

This implements the "git proj" subcommand, for managing large binary
files, and repositiories on external drives.

=head1 SYNOPSIS

        git proj [-v] [-V] [--version] [-h] [-H pStyle]

        git proj [pSubCmd] [pSubCmdOpt] [pComOpt]

        pSubCmd: init, remote, clone, push, pull, status
        pSubCmdOpt: Just run: "git proj [pSubCmd]"
        [common-options]: [-h] [-H pStyle] [-q -v -V N] [-x... -X N]

=head1 DESCRIPTION

The "git proj" subcommand supports using git repo for versioning files to
locally mounted external drives.

git-proj also mostly solves the issue with large binary files causing
git repo "bloat". Large files are not versioned, they are only
copied. So if a version important, just rename the file.  (symlinks
are used and versioned to point to the large binary files.)

This is a much simpler implementation than git-lfs for managing the
versioning of large binary files. Since the large files are not
versioned, i.e. only the last version is saved, this is a comompromize
on having "perfect" version control of the files.

The main inspiration for the proj tool came from the need to
versioning video projects. Video files are HUGE, yet they don't change
much. Since most video files are rendered from files that do not
change, it is only important to version the video editor's file, so
that you can recreate a particular video file version. Since rendering
takes time you will want to save the rendered file. But there is usually
no need to save every rendered version.

=head1 OPTIONS

=head2 pSubCmd

=over 4

=item B<init - Initialize the git project repo>

 git proj init [-l [pDirPath]] [-e pDirPath] [-r [pDirPath]

=item B<clone - Clone a previously saved project>

 git proj clone pExternalPath

=item B<add - Add a large binary file to the "raw" remote>

 git proj add pFilePath

=item B<push - Push files to the "raw" remote>

 git proj push [-b]

=item B<pull - Pull files from the "raw" remote>

 git proj pull [-b]

=item B<config - Redefine config values>

 git proj config [-l pExternalPath] [-e pRawPath]

=item B<status - Show the staus of "raw" files, and more>

 git proj status [-b] [-v]

=back

=head2 pSubCmdOpt

=over 4

=item B<git proj [pSubCmd]>

For most pSubCmds this outputs short usage help.

=item B<git proj [pSubCmd -h]>

This outputs full usage help for pSubCmd.

=item B<git proj [pSubCmd -H pStyle]>

See B<-H pStyle> in pComOpt section, for the output styles.

=back

=head2 [common-options]

minimum

=over 4

=item B<-h>

Output this "long" usage help. See "-H long"

=item B<-H pStyle>

pStyle is used to select the type of help and how it is formatted.

Supported styles:

        short|usage - Output short usage help as text.
        long|text   - Output long usage help as text. All subcommands.
        man         - Output long usage help as a man page.
        html        - Output long usage help as html. All subcommands.
        md          - Output long usage help as markdown.
        int         - Output internal documentation as text.
        int-html    - Output internal documentation as html.
        int-md      - Output internal documentation as markdown.

=item B<-q>

Set verbose to lowest level: 0

Only very important log messages will be output.

=item B<-v>

This sets the verbose lovel to 2, which is the default.

At level 2, warning and notice messages will be output.

=item B<-V N>

Set the verbose level to N.

 0 - critical, errors, and important warning are output
 1 - warnings and above are output
 2 - notice and above are output
 3 - info and above are output

The verbose level can also be set with env. var. gpVerbose. However
the command line option will override the variable.

=item B<-x>

Set the gpDebug level number. Add 1 for each -x argumen.  Or you can set
gpDebug before running the script. Or you can use the -X option.

    "fLog -p debug" messages will be output if gpDebug != 0.
    "fLog -p debug-N" messages will be output if gpDebug >= N.

See: fLog Internal documentation for more details.

=item B<-X N>

Set the gpDebug level to N. The command line options will override the
gpDebug env. var.

 0 - no debug messages
 >0 - "debug" messages
 1 - "debug-1" messages
 2 - "debug-2" and "debug-1" messages
 ...
 N - "debug-N" and messages less than N

=back

=head2 ~/.gitconfig

Source: gpDoc/config/gitconfig

If this doesn't exist, git proj init will create it from "Source"

Section: [gitproj config]

git proj init, will copy this... TBD

    remote-min-space = 20g

This is the minium space that should be available on the external
drive.  The command will not continue if there is not enough space.
The available space must also be twice the size of the space used by
ProjName.raw.

    remote-raw-origin

Default: -d pMountDir/ProjName.raw

Section: [gitproj hook]

TBD

=head2 top-dir/.gitproj

TBD

=head2 top-dir/.git/config

TBD - this needs to be rewritten.

Where HOSTNAME will be set to $HOSTNAME. This allows for different
locations of file, based on the host. For example the remote-raw-url
(mount point) could be very different between hosts.

Initial Source: ~/.gitconfig Sections [gitproj *]

This will be created when git project repo is first created on a host.

This will be put at the beginning of the config file, so that common
project defaults can be defined. Then .gitproj.config.HOSTNAME can
override variables. Any changed to the variables in
.gitproj.config.local variables will be written to
.gitproj.config.HOSTNAME

Uncomment the variables that should override ~/.gitconfig or
~/.gitproj.config.global. If the variables are host specific, then the
variable should be put in the correspoinding .gitproj.config.$HOSTNAME
file.

        [gitproj "config"]
                # Expected version, only first N must be the same.
                # Use backward compatible code, or exit.
                # Warn if second N is different
                ver = 0.1.2

                # States: not-installed, installed, config-errors
                proj-status = not-installed

                syslog = true
                facility = user

                bin = /usr/lib/git-core
                # bin = $(git --exec-path)

                doc = /usr/share/doc/git-proj
                test = /usr/share/doc/git-proj/test

                # See .gitproj.config.local and/or .gitproj.config.$HOSTNAME

                # States: not-defined, defined, config-errors
                local-status = not-set-up

                # States: not-defined, defined, multiple-defined
                remote-status = not-defined

                # origin-url with path and .git remote
                proj-name = TBD

                # This should only be changed on the matching host
                # git rev-parse --show-toplevel
                local-top-dir = TBD

                # Set by init. Changing these will require manual repair.
                # If no ~ or /, this is relative to top-dir

                git-flow-pkg = TBD

                # Local mount examples
                remote-raw-origin = TBD
                #remote.origin.url = /MOUNT-DIR/DIR/NAME.git

                # Remote examples (not implemented. TBD)
                #remote-raw-url = joe@example.com:/repo/git/video-2021-09-24/NAME.raw
                #remote.origin-url=USER@example.com:/repo/git/video-2021-09-24/NAME.git
                #remote.origin-url=git@github.com:TurtleEngr/gitproj.git

        [gitproj "hook"]
                # If pre-commit-enabled = true, pre-commit hook script will be
                # installed into .git/hooks/
                # Relative to gpDoc
                source = hooks/pre-commit
                pre-commit-enabled = true
                check-file-names = true
                check-for-big-files = true
                # End size with b, k, m, or g
                binary-file-size = 1k

=head2 Global Env. Var. Config

See... TBD

=for comment =head1 RETURN VALUE

=for comment =head1 ERRORS

=head1 EXAMPLES

[create a blank git-proj]

[create a git-proj from existing files]

=head1 ENVIRONMENT

See Globals section for details.

HOME, USER, HOSTNAME, gpSysLog, gpFacility, gpVerbose, gpDebug, gpAuto

=head1 FILES

Config files:

    ~/.gitconfig - --global (gitproj sections setup with 'init' or 'clone')
    PROJ/.gitproj - set up with 'init' and used by 'clone'
    PROJ/.git/config --local (setup with 'init' or 'clone')

Subcommand files:

    /usr/share/doc/git-proj/
        VERSION - current installed version (git proj --version)
        CHANGES.md - changes for each version
        README.md - getting started
        LICENSE - GNU GPL V3
    /usr/share/doc/git-proj/config/
        gitconfig - global config template
        gitignore - default ignore file
    /usr/share/doc/git-proj/hooks/
        pre-commit - see gitproj.hooks section for configuring this
    /usr/share/doc/git-proj/contrib/
        bash-fmt - format bash scripts
        rm-trailing-sp - fix pre-commit whitespace issues
    /usr/share/doc/git-proj/user-doc/
        git-proj.html - all documentation in one file (git proj -h)
        git-proj.md - all documentation in one file (git proj -h)
        git-proj-CMD*.html (git proj CMD -h)
        git-proj-CMD*.md (git proj CMD -h)
    /usr/lib/git-core/git-proj/
        git-proj - get overall help "git proj -h"
        git-proj-CMD - called with "git proj CMD"
        gitproj-CMD.inc - all the code for CMD

=head1 SEE ALSO

    git proj init
    git proj remote
    git proj clone
    git proj push
    git proj pull
    git proj status

=for comment =head1 NOTES

=head1 CAVEATS

Currently gitproj only supports B<local> git repos. The repos are
called "remote" but that is only because the repo could be put on a
"mounted" disk. Only the "origin" remote is supported. However each
workspace can have its own "origin" definition, because the mount
points could be different between systems.

An existing remote git repo can be used, BUT manual work will be
needed to set it up. TBD

A future implementation could support git repos that are truly remote,
on other systems. When that is implemented, an existing repo could be
"upgraded" to be a gitproj repo. The "raw" file remote could also be
saved on other systems (via rsync, rclone, or even cvs).

=for comment =head1 DIAGNOSTICS

Use use the -x or -X options, or gpDebug env. var.  to turn on debug
levels. Larger numbers, more debug. There is only a little bit of
debug output, because the code uses "test code" to identify problems,
before the code is released. See the github repo for the development
process.

=head1 BUGS

Please report bugs at: L<issues|https://github.com/TurtleEngr/gitproj/issues>

=for comment =for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

(c) Copyright 2022 by TurtleEngr

=cut
EOF
} # fUsage

# ====================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of the com script if not already set
if [ -z "$gpBin" ]; then
    gpBin=${0%/*}
    if [ "$gpBin" = "." ]; then
        gpBin=$PWD
    fi
    cd $gpBin >/dev/null 2>&1
    gpBin=$PWD
    cd - >/dev/null 2>&1
fi

# -----
. $gpBin/gitproj-com.inc
fComSetGlobals

if [ $# -eq 0 ]; then
    echo "Version: $cGitProjVersion"
    fUsage usage
fi

# -------------------
# Get Args Section

# Is this a sub-command? I.e. first option is not a flag.
if [ "x${1#-}" = "x$1" ]; then
    tCmd=$gpBin/git-proj-$1
    if [ -x $tCmd ]; then
        shift
        $tCmd $*
        exit $?
    fi
    fError -m "Unknown sub-command: $*" -l $tSrc:$LINENO
fi

while getopts :vVhH:xX:-: tArg; do
    case $tArg in
        v)
            echo "Version: $cGitProjVersion"
            exit 1
            ;;
        V)
            echo "Version: $cGitProjVersion"
            exit 1
            ;;
        -)
            if [ "$OPTARG" = "version" ]; then
                echo "Version: $cGitProjVersion"
                exit 1
            fi
            fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO
            ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        x) let gpDebug=gpDebug+1 ;;
        X) gpDebug=$OPTARG ;;
        # Problem arguments
        :) fError -m "Value required for option: $OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

echo "Version: $cGitProjVersion"
fUsage usage
exit 0
