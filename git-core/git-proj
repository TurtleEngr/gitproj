#!/bin/bash

fUsage()
{
    # Quick help, run this:
    # git-proj -h | less

    local pStyle="${1:-short}"

    local tFileList="\
	-f $cBin/git-proj \
	-f $cBin/git-proj-init \
	-f $cBin/git-proj-clone \
	-f $cBin/git-proj-add \
	-f $cBin/git-proj-push \
	-f $cBin/git-proj-pull \
	-f $cBin/git-proj-config \
	-f $cBin/git-proj-status \
    "

    local tIntFileList="\
        $tFileList \
	-f $cBin/gitproj-com.inc \
	-f $cBin/gitproj-com.test \
    "

    case $pStyle in
        short | usage | man)
            fComUsage -s $pStyle -f $cCurDir/$cName
            ;;
        long | text | md)
            fComUsage -s $pStyle $tFileList
            ;;
        html)
            fComUsage -s $pStyle -t "$cName Usage" $tFileList
            ;;
        int)
            fComUsage -i -s long $tIntFileList
            ;;
        int-html)
            fComUsage -i -s html -t "$cName Internal Doc" $tIntFileList
            ;;
        int-md)
            fComUsage -i -s md $tIntFileList
            ;;
        *)
            fComUsage -s short -f $cCurDir/$cName
            ;;
    esac
    exit 1

    cat <<\EOF >/dev/null
=pod

=head1 NAME

git-proj - this implements the "git proj"

=head1 SYNOPSIS

 	git proj [pSubCmd] [pSubCmdOptions] [pComOpt]

 	pSubCmd: init, clone, add, push, pull, set, status
 	pComOpt: [-h] -H pStyle] [-v] [-x]
 
=head1 DESCRIPTION

The "git proj" subcommand supports using git repo for versioning files to
locally mounted external drives.

git-proj also supports the issue with large
binary files causing git repo "bloat". Large files are not versioned,
they are only copied. So if a version important, just rename the file.
(symlinks are used and versioned to point to the large binary files.)

This is a much simpler implementation than git-lfs for managing the
versioning of large binary files. Since the large files are not
versioned, i.e. only the last version is saved, this is a comompromize
on having "perfect" version control of the files. The main inspiration
for the proj tool came from the need to versioning video
projects. Video files are HUGE, yet they don't change much. Since most
video files are rendered from files that do not change, it is only
important to version the video editor's file, if you need to recreate
a particular video file version.

=head1 OPTIONS

=head2 pComOpt

=over 4

=item B<-h>

Output this "long" usage help. See "-H long"

=item B<-H pStyle>

pStyle is used to select the type of help and how it is formatted.

Styles:

	short|usage - Output short usage help as text.
	long|text   - Output long usage help as text. All subcommands.
	man 	    - Output long usage help as a man page.
	html 	    - Output long usage help as html. All subcommands.
	md 	    - Output long usage help as markdown.
	int 	    - Also output internal documentation as text.
	int-html    - Also output internal documentation as html.
	int-md 	    - Also output internal documentation as markdown.

=item B<-v>

Verbose output. Default is is only output (or log) messages with
level "warning" and higher.

 -v - output "notice" and higher.
 -vv - output "info" and higher.

=item B<-x>

Set the gpDebug level. Add 1 for each -x.
Or you can set gpDebug before running the script.

See: fLog (Internal documentation)

=back

=head2 pSubCmd

=over 4

=item B<init - Initialize the git project repo>

 git proj init [-l [pDirPath]] [-e pDirPath] [-r [pDirPath]

=item B<clone - Clone a previously saved project>

 git proj clone pExternalPath

=item B<add - Add a large binary file to the "raw" remote>

 git proj add pFilePath

=item B<push - Push files to the "raw" remote>

 git proj push [-b]

=item B<pull - Pull files from the "raw" remote>

 git proj pull [-b]

=item B<config - Redefine config values>

 git proj config [-l pExternalPath] [-e pRawPath]
 
=item B<status - Show the staus of "raw" files, and more>

 git proj status [-b] [-v]

=back


=head2 Config

These are globals that may affect how the script runs. Just about all
of these globals that begin with "gp" can be set and exported before
the script is run. That way you can set your own defaults, by putting
them in your ~/.bashrc or ~/.bash_profile files.

The the "common" CLI flags will override the initial variable settings.

=over 4

=item B<gpLog>

If set to 0, log messages will only be sent to stderr.

If set to 1, log messages will be sent to stderr and syslog.

See -l, fLog and fErr for details

Default: 0

=item B<gpFacility>

Log messages sent to syslog will be sent to the "facility" specified
by by gpFacility.

"user" log messages will be sent to /var/log/user.log, or
/var/log/syslog, or /var/log/messages.log

See: fLog

Default: user

Allowed facility names:

 local0 through local7 - local system facilities
 user - misc scripts, generic user-level messages
 auth - security/authorization messages
 authpriv - security/authorization messages (private)
 cron - clock daemon (cron and at)
 daemon - system daemons without separate facility value
 ftp - ftp daemon
 kern - kernel  messages  (these  can't be generated from user processes)
 lpr - line printer subsystem
 mail - mail subsystem
 news - USENET news subsystem
 syslog - messages generated internally by syslogd(8)
 uucp - UUCP subsystem

These are some suggested uses for the localN facilities:

 local0 - system or application configuration
 local1 - application processes
 local2 - web site errors
 local3 - web site access
 local4 - backend processes
 local5 - publishing
 local6 - available
 local7 - available

=item B<gpVerbose>

If set to 0, only log message at "warning" level and above will be output.

If set to 1, all non-debug messages will be output.

See -v, fLog

Default: 0

=item B<gpDebug>

If set to 0, all "debug" and "debug-N" level messages will be skipped.

If not 0, all "debug" level messages will be output.

Or if "debug-N" level is used, then if gpDebug is <= N, then the
log message will be output, otherwise it is skipped.

See -x

=item B<gpUnitDebug>

If set to non-zero, then the fUDebug function calls will output
the messages when in test functions.

See gitproj-com.test

=back

=head1 RETURN VALUE

=head1 ERRORS

=head1 EXAMPLES

=head1 ENVIRONMENT

See Globals section for details.

HOME,USER, gpLog, gpFacility, gpVerbose, gpDebug, gpUnitDebug

=head1 FILES

=head1 SEE ALSO

shunit2.1

=head1 NOTES

=head1 CAVEATS

[Things to take special care with; sometimes called WARNINGS.]

=head1 DIAGNOSTICS

=head2 Testing

In the top git cloned directory, run the unit test functions with the
command:

    gitproj-com.test

will run all of the functions that begin with "test".

    gitproj-com.test [testName,testName,...]

This will run the listed testName functions.

For more details about shunit2 (or shunit2.1), see
shunit2/shunit2-manual.html
L<Source|https://github.com/kward/shunit2>

See shunit2, shunit2.1, and global: gpUnitDebug

Also for more help, use the "-H int" option.

=head1 BUGS

=head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

(c) Copyright 2021 by TurtleEngr

$Revision: 1.0 $

=cut
EOF
}

# ====================
# Main
export PWD Tmp cBin cCurDir cName cPID cTmp1 cTmp2 cTmpF cVer
export gErr gpDebug gpFacility gpLog gpVerbose

# -------------------
# Set current directory location in PWD and cCurDir
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi
cCurDir=$PWD

# -------------------
# Define the location of this script
cBin=${0%/*}
if [ "$cBin" = "." ]; then
    cBin=$PWD
fi
cd $cBin
cBin=$PWD
cd $cCurDir

# -----
. $cBin/gitproj-com.inc

# shellcheck disable=SC2016
cVer='$Revision: 1.49 $'

#fSetGlobals
fComSetGlobals

if [ $# -eq 0 ]; then
    fUsage short
fi

# -------------------
# Get Args Section
if [ $# -eq 0 ]; then
    fError2 -m "Missing options." -l $LINENO
fi
while getopts :hH:lvx tArg; do
    case $tArg in
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        l) gpLog=1 ;;
        v) let gpVerbose=gpVerbose+1 ;;
        x) let gpDebug=gpDebug+1 ;;
        # Problem arguments
        :) fError "Value required for option: -$OPTARG" $LINENO ;;
        \?) fError "Unknown option: $OPTARG" $LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError "Unexpected option: $*" $LINENO
fi

exit 0
