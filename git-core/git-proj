#!/bin/bash

export gpCmdName gpBin

fUsage()
{
    # Quick help, run this:
    # git-proj -h | less

    local pStyle="${1:-usage}"

    local tFileList="\
        -f $gpBin/git-proj \
        -f $gpBin/git-proj-init \
        -f $gpBin/git-proj-remote \
        -f $gpBin/git-proj-clone \
        -f $gpBin/git-proj-push \
        -f $gpBin/git-proj-pull \
        -f $gpBin/git-proj-status \
        "
    tFileList="$(echo $tFileList)"

    #-f $gpBin/git-proj-config \
    #-f $gpBin/git-proj-add \
    #-f $gpBin/git-proj-rm \
    #-f $gpBin/git-proj-check \

    local tIntFileList="\
        $tFileList \
        -f $gpBin/gitproj-com.inc \
        -f $gpBin/gitproj-init.inc \
        -f $gpBin/gitproj-remote.inc \
        -f $gpBin/gitproj-clone.inc \
        -f $gpBin/gitproj-pull.inc \
        -f $gpBin/gitproj-push.inc \
        -f $gpBin/gitproj-status.inc \
    "
    tIntFileList="$(echo $tIntFileList)"

    case $pStyle in
        short | usage | man)
            fComUsage -s $pStyle -f $gpBin/git-proj
            ;;
        long | text | md)
            fComUsage -s $pStyle $tFileList
            ;;
        html)
            fComUsage -s $pStyle -t "git proj Usage" $tFileList
            ;;
        int)
            fComUsage -i -s long $tIntFileList
            ;;
        int-html)
            fComUsage -i -s html -t "$gpCmdName Internal Doc" $tIntFileList
            ;;
        int-md)
            fComUsage -i -s md $tIntFileList
            ;;
        *)
            fComUsage -s usage -f $gpBin/$gpCmdName
            ;;
    esac
    exit 1

    cat <<\EOF >/dev/null
=pod

=head1 NAME git proj

This implements the "git proj" sub-command, for managing large binary
files, and repositories on external drives.

=head1 SYNOPSIS

        git proj [-v] [-V] [--version] [-h] [-H pStyle]

        git proj [pSubCmd] [pSubCmdOpt] [pComOpt]

        pSubCmd: init, remote, clone, push, pull, status
        pSubCmdOpt: Just run: "git proj [pSubCmd] -H usage"
        [common-options]: [-h] [-H pStyle] [-q -v -V N] [-x... -X N]

=head1 DESCRIPTION

The "git proj" sub-command supports using git repo for versioning files to
locally mounted external drives.

git-proj also mostly solves the issue with large binary files causing
git repo "bloat". Large files are not versioned, they are only
copied. So if a version important, just rename the file.  (symlinks
are used and versioned to point to the large binary files.)

This is a much simpler implementation than git-lfs for managing the
versioning of large binary files. Since the large files are not
versioned, i.e. only the last version is saved, this is a compromise
on having "perfect" version control of the files.

The main inspiration for the proj tool came from the need to
versioning video projects. Video files are HUGE, yet they don't change
much. Since most video files are rendered from files that do not
change, it is only important to version the video editor's file, so
that you can recreate a particular video file version. Since rendering
takes time you will want to save the rendered file. But there is usually
no need to save every rendered version.

=head1 OPTIONS

=head2 pSubCmd

=over 4

=item B<init> - Initialize the git project repo

=item B<remote> - Define the remote git repo and raw location

=item B<clone> - Clone a previously saved project

=item B<push> - Push files to the "raw" remote (and optionally git)

=item B<pull> - Pull files from the "raw" remote> (and optionally git)

=item B<status> - Show the status of "raw" files, and git

=item B<add> - TBD Add a large binary file to the "raw" remote

=item B<config> - TBD Redefine config values

=back

=head2 pSubCmdOpt

Use S<"git proj CMD -H usage"> to get a quick summary of a command's options.

Use S<"git prog CMD -h"> for full help.

=head2 [common-options]

 -h
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)

=over 4

=item B<-h>

Output this "long" usage help. See "-H long"

=item B<-H pStyle>

pStyle is used to select the type of help and how it is formatted.

Supported styles:

    short|usage - Output short usage help as text.
    long|text   - Output long usage help as text. All sub-commands.
    html        - Output long usage help as html. All sub-commands.
    md          - Output long usage help as markdown.
    man         - Output long usage help as a man page.
    int         - Output internal documentation as text.
    int-html    - Output internal documentation as html.
    int-md      - Output internal documentation as markdown.

=item B<-q>

Set verbose (gpVerbose=0) to lowest level: 0

Only very important log messages will be output.

=item B<-v>

This sets the verbose level (gpVerbose=2) to 2, which is the default.

At level 2, warning and notice messages will be output.

=item B<-V N>

Set the verbose level to N (gpVerbose=N)

             N
    0 - -q,-V0 critical, errors, and important warning are output
    1 -    -V1 warnings and above are output
    2 - -v,-V2  notice and above are output
    3 -    -V3 info and above are output

The verbose level can also be set with env. var. gpVerbose. However
the command line option will override the variable.

gpVerbose and gpDebug control what log messages are output. This is
what the log messages look like:

* Normal log messages:

    [Command] [warning|notice|info]: [Message] [File:LineNo](ErrCode)

* Error messages (crit will exit, err might continue):

    [Command] [crit|err]: Error: [Message] [File:LineNo](ErrCode)
    If gpDebug >= 2, a StackTrace will be output.

* An internal error. This is probably a defect in the code (collect all
the output for a bug report):

    [Command] [crit|err]: Internal: Error: [Message] [File:LineNo](ErrCode)
    StackTrace: ...

Key:

    [Command] - the top level command
    [crit|err|warning|notice|info|debug] - log levels
    [File:LineNo](ErrCode) - exactly where the error message came from (optional)

=item B<-x>

Set the gpDebug level number. Add 1 for each -x argument.  Or you can
set gpDebug before running the script. Or you can use the -X option.

=item B<-X N>

Set the gpDebug level to N. The command line options will override the
gpDebug env. var.

    0  - no debug messages
    >0 - "debug" messages
    1  - "debug-1" messages
    2  - "debug-2" and "debug-1" messages
    ...
    N  - "debug-N" and messages less than N

Debug log messages look like this::

    [Command] [debug]: debug-N: [Message] [File:LineNo](ErrCode)

=back

=head2 Configuration

These are the main configuration files you will need to know about.

 /usr/share/doc/config/gitconfig
 ~/.gitconfig
 PROJ/.gitproj
 PROJ/.git/config

See LINK{gitproj Configuration Documentation|config.html} for
details about these files and all the important gitproj variables.
The pre-commit hook and its config vars are also described.

=head1 RETURN VALUE

The sub-commands will return 0, if there were no serious errors. Even
if 0, pay attention to the log messages that are output.

If a sub-command retuns a non-0 code, then some change is needed before
trying again. Hopefully the error and warning message describe what
needs to change.

=for comment =head1 ERRORS

=head1 EXAMPLES

See  the tutorial document for some examples.

=head1 ENVIRONMENT

HOME, USER, gpSysLog, gpFacility, gpVerbose, gpDebug, gpAuto

See the LINK{gitproj Configuration Documentation|config.html} for a
complete list of env. vars.

=head1 FILES

See the LINK{gitproj Configuration Documentation|config.html} for a
complete list of important files.

All the User Documentation can also be found online in github at:
L</doc/user-doc|https://github.com/TurtleEngr/gitproj/tree/main/doc/user-doc>

=head1 SEE ALSO

    git proj init
    git proj remote
    git proj clone
    git proj push
    git proj pull
    git proj status
    git proj add
    git proj config

    /usr/share/doc/git-proj/user-doc/
	git-proj.html - all in one file
        config.html - important configuration information
    /usr/share/doc/git-proj/user-doc/tutorial/

    Online docs: L<https://github.com/TurtleEngr/gitproj/tree/main/doc|https://github.com/TurtleEngr/gitproj/tree/main/doc>

=for comment =head1 NOTES

=head1 CAVEATS

Currently gitproj only supports B<local> git repos. The repos are
called "remote" but that is only because the repo could be put on a
"mounted" disk. Only the "origin" remote is supported. However each
workspace can have its own "origin" definition, because the mount
points could be different between systems.

An existing remote git repo can be used, BUT manual work will be
needed to set it up. A tutorial may be created to describe the
manual changes.

A future implementation could support git repos that are truly remote,
on other systems. When that is implemented, an existing repo could be
"upgraded" to be a gitproj repo. The "raw" file remote could also be
saved on other systems (via rsync, rclone, or even cvs).

The list of feature requests can be found at:
L<enhancements|https://github.com/TurtleEngr/gitproj/labels/enhancement>

=head1 DIAGNOSTICS

Use use the -x or -X options, or gpDebug env. var.  to turn on debug
levels. Larger numbers, more debug. There is only a little bit of
debug output, because the code uses "test code" to identify problems,
before the code is released. See the github repo for the development
process.

=head1 BUGS

Please report bugs at: L<issues|https://github.com/TurtleEngr/gitproj/issues>.

Use the "Bug Report" or "Feature Request" templates to submit your issue.

=for comment =for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

(c) Copyright 2022 by TurtleEngr

=cut
EOF
} # fUsage

# ====================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of the com script if not already set
if [ -z "$gpBin" ]; then
    gpBin=${0%/*}
    if [ "$gpBin" = "." ]; then
        gpBin=$PWD
    fi
    cd $gpBin >/dev/null 2>&1
    gpBin=$PWD
    cd - >/dev/null 2>&1
fi

# -----
. $gpBin/gitproj-com.inc
fComSetGlobals

if [ $# -eq 0 ]; then
    echo "Version: $cGitProjVersion"
    fUsage usage
fi

# -------------------
# Get Args Section

# Is this a sub-command? I.e. first option is not a flag.
if [ "x${1#-}" = "x$1" ]; then
    tCmd=$gpBin/git-proj-$1
    if [ -x $tCmd ]; then
        shift
        $tCmd $*
        exit $?
    fi
    fError -m "Unknown sub-command: $*" -l $tSrc:$LINENO
fi

while getopts :vVhH:xX:-: tArg; do
    case $tArg in
        v)
            echo "Version: $cGitProjVersion"
            exit 1
            ;;
        V)
            echo "Version: $cGitProjVersion"
            exit 1
            ;;
        -)
            if [ "$OPTARG" = "version" ]; then
                echo "Version: $cGitProjVersion"
                exit 1
            fi
            fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO
            ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        x) let gpDebug=gpDebug+1 ;;
        X) gpDebug=$OPTARG ;;
        # Problem arguments
        :) fError -m "Value required for option: $OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

echo "Version: $cGitProjVersion"
fUsage usage
exit 0
