#!/bin/bash

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-config -h | less
    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1
    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj config

=head1 SYNOPSIS

    NOT IMPLEMENTED YET
    git proj config [common-options]

=head1 DESCRIPTION

=head2 Main Menu Options

=over 4

=item * Run all health checks, only report problems. [error]

=item * Run all health checks, only report differences [diff, warnings]

=item * Run all health checks, report status [info]

=item * Select Global Actions

=item * Select Local Actions (offered only if in a PROJ)

=item * Select Other Actions

=back

=head2 Global Checks

These are done even if not in a git-proj managed workspace.

The Validate Checks, check $gpDoc/gitconfig and ~/.gitconfig. If there
is a problem they can be fixed by: 1) manually setting, 2) select
default, or 3) if ~/.gpconfig select from $gpDoc/gitconfig.

=over 4

=item * Validate "facility" name [error]

=item * Validate "bin" and "doc" locations [error]

=item * Validate all bool vars are only true/false [error]

=item * Validate all int vars only have numbers [error]

=item * Compare ~/.gitconfig with $gpDoc/config/gitconfig [diff]

=item * Compare ~/.gitignore with $gpDoc/config/gitignore [diff]

=item * Compare ~/.pre-commit with $gpDoc/hooks/pre-commit [diff]

=item * if git-flow=true

=over 4

=item * is git-flow installed? [warning]

=item * are git-flow section vars defined? [warning]

=back

=back

=head2 Local Checks

These are done if you are in a git-proj managed workspace.

The Validate Checks, check PROJ/gitproj and --local. If
there is a problem they can be fixed by: 1) manfully setting, 2) select
from ~/.gitconfig, 3) select default

=over 4

=item * If defined, validate "facility" name [error]

=item * If defined, validate "bin" and "doc" locations [error]

=item * Validate all gitproj bool vars are only true/false [error]

=item * Validate all gitproj int vars only have numbers [error]

=item * Compare PROJ/.gitproj with ~/.gitconfig (only list the diffs
from all gitproj sections and the diffs that are in .gitproj and also
in ~/.gitconfig [diff]

=item * Compare PROJ/.gitproj with PROJ/.git/config (only list the
diffs from all gitproj sections and the diffs that are in .gitproj and
also in ~/.gitconfig [diff]

=item * Compare PROJ/.gitignore with ~/.gitignore [diff]

=item * Compare PROJ/.pre-commit with ~/.pre-commit [diff]

=item * Compare PROJ/.git/hooks/pre-commit with PROJ/.pre-commit [diff]

=item * Note disabled pre-commit checks [info]

=item * prog-name != top dir name [warning]

=item * gitproj.config.local-status - is TBD [error]

=item * remote.origin.url - not defined
(git-proj-init needs to be run) [error]

=item * gitproj.config.remote-status - is TBD
(git-proj-remote needs to be run) [error]

=item * gitproj.config.remote-raw-origin - is TBD
(git-proj-remote needs to be run) [warning]

=item * warn if gitproj.config.remote.min-space is < 2x existing space [warning]

=item * if gitproj.config.remote-raw-origin, report if not found.
(suggest mounting it or running git-proj-remote) [warning]

=back

=head2 Additional Checks

=over 4

=item * List symlinks with problems [error]

=item * Check for big binary files, not in raw/ [warning]

=item * Report on all symlinks in PROJ [info]

=back

=head3 Global Action Menus

=over 4

=item * Update missing vars in ~/.gitconfig from $gpDoc/config/gitconfig?

=item * Force update of ALL gitproj sections from $gpDoc/config/gitconfig?

=item * Force update of "gitproj config" section from $gpDoc/config/gitconfig?

=item * Force update of "gitproj hooks" section from $gpDoc/config/gitconfig?

=item * Update ~/.gitignore from $gpDoc/config/gitignore?  (note this
will result in a sorted list, with duplicates removed) (only adds
missing from $gpDoc/config/.gitignore)

=item * Replace ~/.pre-commit from $gpDoc/hooks/pre-commit?

=item * Install/update git-flow and corresponding configs?

=back

=head2 Local Action Menus

=over 4

=item * Fix remote.origin.url

=item * Change: gitproj.config.remote-raw-origin? (Best way: run
git-proj-remote)

=item * Force update of PROJ/.gitproj from --local
(core, git-flow, and gitproj sections only)

=item * Force update of --local from PROJ/.gitproj
(core, git-flow, and gitproj sections only)

=item * Update missing vars in PROJ/.gitproj and --local from
~/.gitconfig (gitproj sections only)

=item * Force update of ALL vars in PROJ/.gitproj and --local from
~/.gitconfig (remotes are not changed) (gitproj sections only) (and
vars in-common)

=item * Force update of ALL gitproj sections in PROJ/.gitproj and
--local from ~/.gitconfig (remotes are not changed)

=item * Force update of "gitproj config" section in PROJ/.gitproj and
--local from ~/.gitconfig (remotes are not changed)

=item * Force update of "gitproj hooks" section in PROJ/.gitproj and
--local from ~/.gitconfig

=item * Update ~/.gitignore from ~/.gitignore? (note this will result
in a sorted list, with duplicates removed) (only adds missing from
~/.gitignore)

=item * Replace PROJ/.pre-commit and PROJ/.git/hooks/pre-commit from
~/.pre-commit

=head2 Additional Action Menus

=over 4

=item * Set remote-min-space (1) set manually, 2) set from
~/.gitconfig, 3) default)

=item * Set the max size for commits of binary files.  (1) set
manually, 2) set from ~/.gitconfig, 3) default)

=back

=head1 OPTIONS

=over 4

=item B<[common-options]>

 -h
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)

Run "git proj -h" for details. Or "man git-proj" for help with all the
sub-commands.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj remote
 git proj clone
 git proj push
 git proj pull
 git proj set
 git proj status
 git proj add   TODO
 git proj config
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
    exit 1
}

# ====================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals
. $gpBin/gitproj-config.inc

# -------------------
while getopts :hH:qvV:xX: tArg; do
    case $tArg in
        # Script arguments
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        q) gpVerbose=0 ;;
        v) gpVerbose=2 ;;
        V) gpVerbose=$OPTARG" ;;
        x) let ++gpDebug ;;
        X) gpDebug=$OPTARG" ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

# ----------
fConfigMenu
exit 0
