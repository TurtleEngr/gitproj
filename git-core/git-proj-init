#!/bin/bash

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-init -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $cCurDir/$cName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj init

=head1 SYNOPSIS

 git proj init [-l pDirPath] [-r] [-e pDirPath] [-h]

 -l - run "git init" in the pDirPath
 -r - create a raw directory relative to the repo
 -e - clone the repo and raw files to a mounted drive at $pDirPath
 -h - full help

=head1 DESCRIPTION

"git proj init" is used to initialize the local and remote areas.

=head1 OPTIONS

=over 4

=item B<-l pDirPath>

Intialize a local git repo in pDirPath. If pDirPath is not specified
then $PWD will be used. The git repo will be named after the last
directory in pDirPath.

Create a new git repo in this directory. After adding and committing
files, use "git proj init -e" to push the repo to a mounted drive.

"git flow init" will also be called, if it is installed.

=item B<-r>

Define the "raw" file dir for files that will not be versioned.
[top_git_dir]/../[git_dir_name].raw will be used. In [top_git_dir]
this symlink will be created: raw->../[git_dir_name].raw

=item B<-e pDirPath>

Export the git repo to an external drive (or another local dir) This
is usually the removable drive's "top" directory.  Ideally the top
directory should be different across a set of drives, so that the
local "origin" can be used to make sure the proper git repo is round
on the drive. "origin" will be set to $pDirPath

After adding and committing files, run this script to copy this git
repo to a mounted drive (or to another local directory).

A mounted drive should have top directory that is different from other
drives so that the repo can be found with it's "origin" name.

Example
       
With a mount point: /mnt/usb-video create the remote git at the top
directory video-2019-04-01, with:

 git proj init -e /mnt/usb-video/video-2019-04-01

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment=head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj init
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj set
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

$Revision: 1.52 $

=cut

EOF
    exit 1
} # fUsage

# --------------------
fCheckForGit()
{
    if [ ! -d .git ]; then
        fError -m ".git not found in current directory. cd to a directory with .git in it, or use "git proj init -l" to create a new local repo." -l $LINENO
    fi
}

# ========================================
# -l fCreateLocalGit Section

# --------------------
fCheckPkg()
{
    local pPkg=$1

    dpkg -l $pPkg 2>/dev/null | grep -q "^ii *$pPkg"
    return $?
}

# --------------------
fCheckForNoGit()
{
    if git $cOrigin; then
        git branch
        fError -m ".git already exists for the directory." -l $LINENO
        exit 1
    fi
}

# --------------------
fMkGitDir()
{
    cat <<EOF >.gitignore
*.tmp
*~
.cache/
.cvsignore
CVS/
core
nohup.out
proxy/
thumbs/
tmp/
EOF
    set -x
    git init
    if fCheckPkg git-flow; then
        git flow init
    fi
    git checkout develop
    git add .gitignore
    git status
    set +x
}

# --------------------
fCreateLocalGit()
{
    fCheckForNoGit
    fMkGitDir
} # fCreateLocalGit

# ========================================
# -r fCreateRawDir Section

# --------------------
fCreateRawDir()
{
    fCheckForGit
} # fCreateRawDir

# ========================================
# -e fCreateRemoteGit Section

# --------------------
fCheckPath()
{
    local pPath=$1

    local tName=${PWD##*/}

    if [ ! -d $pPath ]; then
        fError -m "Could not find: $pPath" -l $LINENO
    fi
    if [ ! -w $pPath ]; then
        fError -m "$pPath is not writable for you." -l $LINENO
    fi
    if [ -e $pPath/$tName.git ]; then
        fError -m "$pPath/$tName.git already exists." -l $LINENO
    fi
}

fCheckSpace()
{
    local pPath=$1

    local tAvail
    local tGitSize
    local tRawSize
    local tDesiredSize

    tAvail=$(df -BM $pPath --output=avail | tail -n1)
    tAvail=${tAvail%M}

    tGitSize=$(du -sm .git | awk '{print $1}')
    let tGitSize*=2

    tRawSize=$(du -sm raw | awk '{print $1}')
    let tRawSize*+2

    let tDesiredSize=tGitSize+tRawSize

    if [ $tDesiredSize -gt $tAvail ]; then
        fError -m "There is not enough space at $pPath. $pPath has ${tAvail}MB. .git and raw needs ${tDesiredSize}MB" -l $LINENO
    fi
}

# --------------------
fMkRemote()
{
    local pPath=$1

    local tSrcPath=$PWD
    local tProjName=${PWD##*/}

    set -x
    cd $pPath &>/dev/null
    git clone --bare --local --no-hardlinks --progress -v $tSrcPath/.git
    cd - &>/dev/null
    git remote add origin $pPath/$tProjName.git
    set +x
}

# --------------------
fReport()
{
    echo 'Remote origin is now set to:'
    git $cOrigin
    cat <<EOF
Be sure the disk is mounted and $gpPath exists.
Then you can use: "git push origin develop"
If the mount path is changed, use "git proj set -e" to update the origin.
EOF
}

# --------------------
fCreateRemoteGit()
{
    export cOrigin='config --get remote.origin.url'

    fCheckForGit
    fCheckPath $gpPath
    fCheckSpace $gpPath
    fMkRemote $gpPath
    fReport
} # fCreateRemoteGit

# ====================
# Main
export PWD cBin cCurDir cName cPID cVer
export gErr gpDebug gpFacility gpLog gpVerbose

# -------------------
# Set current directory location in PWD and cCurDir
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi
cCurDir=$PWD

# -------------------
# Define the location of this script
cBin=${0%/*}
if [ "$cBin" = "." ]; then
    cBin=$PWD
fi
cd $cBin
cBin=$PWD
cd $cCurDir

# -------------------
. $cBin/gitproj-com.inc
fComSetGlobals

if [ $# -eq 0 ]; then
    fError -m "Missing options." -l $LINENO
fi

gpAction=""
gpDirPath=""
while getopts :l:re:hH:lvx tArg; do
    case $tArg in
        # Script arguments
        l)
            if [ -n "$gpAction" ]; then
                fError -m "Only one -l, -e, or -r can be specified." -l $LINENO
            fi
            gpAction=fCreateLocalGit
            gpDirPath="$OPTARG"
            ;;
        r)
            if [ -n "$gpAction" ]; then
                fError -m "Only one -l, -e, or -r can be specified." -l $LINENO
            fi
            gpAction=fCreateRawDir
            ;;
        e)
            if [ -n "$gpAction" ]; then
                fError -m "Only one -l, -e, or -r can be specified." -l $LINENO
            fi
            gpAction=fCreateRemoteGit
            gpDirPath="$OPTARG"
            ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        l) gpLog=1 ;;
        v) let ++gpVerbose ;;
        x) let ++gpDebug ;;
        # Problem arguments
        :) fError "Value required for option: -$OPTARG" $LINENO ;;
        \?) fError "Unknown option: $OPTARG" $LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $LINENO
fi

# -------------------
export cOrigin='config --get remote.origin.url'
$gpAction $gpDirPath
exit 0
