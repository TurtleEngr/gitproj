#!/bin/bash

export gpCmdName gpBin cCurDir

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-init -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj init

=head1 SYNOPSIS

    git proj init local [-a]
    	     	  	[-l pLocalDir]
    	     	  	[-r pLocalRawDirPat]
			[-k pSymLink] [-s pMaxSize] [-m] [-f] [-h]

        Defaults: [-l $PWD] [-r ../[NAME].raw] [-k raw] [-s 10K] [-m] [-f]

=head1 DESCRIPTION

This will create a local git repo with branches. If git-flow is
installed can will optionally be setup too. After this setup
the remote git repo with "git proj init remote"

If there is a -a option, "git proj init local" will be run with all
the default options, which can be overridden with the options.

If there is no -a option, you will be prompted for the settings.  See
the OPTION section for details.

When the local and remote git repos are setup, all the setings
will be saved to ~/.gitproj.config and
[project]/gitproj/config.$HOSTNAME. Includes are put in ~/.gitconfig
and [project].git/config to point to the gitproj config files.

=head1 OPTIONS

=over 4

=item B<-a>

The -a option will automattically run the whole init process with
default settings. The options can be defined to override the default
settings.

=item B<-l pLocalDir>

Define the existing project directory. The last directory will be used
for the name of the project. Default: current directory

    Dir (-l) [$PWD]? $gpLocalTopDir
        So the project Name will be: ${gpLocalTopDir##*/}

=item B<-r pLocalRawDirPat>

Set the location for large binary files. It cannot be *in* any of the
project directories. It will be created, if it does not existi. The
path must be relative to the project dir (and not too far away or
cloning the project may not work). The files in the raw directory will
NOT be versioned--only the latest copy will be saved. Default: ".."

    Raw dir (-r) [..]?
        The README.txt file will point to the raw dir.

=item B<-k pSymLink>

Define the symlink name that will point to the Raw dir. It will be
created in the project's top dir. If the Raw dir is moved, this link
will need to be updated. Symlink in the git directories will point to
this dir and the symlinks will be versioned. Default: raw

    Symlink (-k) [raw]?
        (update the README.txt)

=item B<-s pMaxSize>

Define the "size" for large binary files. Default 10K

    Size (-s) [10K]?

=item B<-m>

These binary files greater than [pSize]  were found in your project dir:

    [file list]

The listed files can be moved to the project's raw directory. Dirs
will be created in the raw directory that correspond to the project's
directory. A symlink will replace the moved file. The symlink will
point to [raw]

    Move the files (-m) [y/n]?

=item B<-f>

[If git-flow is installed]

    Setup git-flow (-f) [y/n]?

=item B<-h>

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj remote
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj set
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
    exit 1
} # fUsage

# ========================================
# Main

export cCurDir gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD and cCurDir
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi
cCurDir=$PWD

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

if [ $# -eq 0 ]; then
    fError -m "Missing options." -l $tSrc:$LINENO
fi

. $gpBin/gitproj-init.inc
# Calls: fInitSetGlobals

while getopts :al:r:k:s:mfhH:vx tArg; do
    case $tArg in
        # Script arguments
        a) gpAuto=1 ;;
        l) gpLocalTopDir="$OPTARG" ;;
        r) gpLocalRawDir="$OPTARG" ;;
        k) gpLocalRawSymLink="$OPTARG" ;;
        s) gpMaxSize=="$OPTARG" ;;
        m) gpMove=1 ;;
        f) gpGitFlow=1 ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        v) let ++gpVerbose ;;
        x) let ++gpDebug ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

# ----------
fInitCreateLocalGit
exit 0
