#!/bin/bash

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-init -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj init

=head1 SYNOPSIS

    git proj init -l pLocalDir [-a] [-s pMaxSize] [-m] [-f]
                  [common-options]

=head1 DESCRIPTION

This will create a local git repo with branches. If git-flow is
installed can be setup too. After "git proj init" is done, run
"git proj remote" to setup remote for git and raw files.

If there is a -a option, "git proj init" will be run with all the
default options, which can be overridden with other options.

If there is no -a option, you will be prompted for the settings.  See
the OPTION section for details.

When the local and remote git repos are setup, all the setings
will be saved to [project]/.git/config and [project]/.gitproj

=head1 OPTIONS

=over 4

=item B<-a>

The -a option will automattically run the whole init process with
default settings. The other options can be defined to override the
default settings.

=item B<-l pLocalDir>

Define the existing project directory. The last directory will be used
for the name of the project. Required.

Prompt:

    Dir (-l) [$PWD]? $gpLocalTopDir
        So the project Name will be: ${gpLocalTopDir##*/}

=item B<-s pMaxSize>

Define the "size" for large binary files. Default 10K

Prompt:

    Size (-s) [10K]?

=item B<-m>

Prompt:

    Binary files greater than [pSize] were found in your project dir:
        [file list]

The listed files can be moved to the project's "raw" directory. Dirs
will be created in the raw directory that correspond to the project's
directory. A symlink will replace the moved file. The symlink will
point to [raw].

The symlinks are only provided for backward compatability; it would be
best to remove those links and modifiy your code and apps to access
the files directly from the raw directories.

Prompt:

    Move the files (-m) [y/n]?

=item B<-f>

If git-flow is installed.

Prompt:

    Setup git-flow (-f) [y/n]?

=item B<[common-options]>

 -h
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)

Run "git proj -h" for details. Or "man git-proj" for help with all the
subcommands.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=for comment =head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj remote
 git proj clone
 git proj push
 git proj pull
 git proj set
 git proj status
 git proj add   TODO
 git proj config TDO
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
    exit 1
} # fUsage

# ========================================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

if [ $# -eq 0 ]; then
    fError -m "Missing options." -l $tSrc:$LINENO
fi

. $gpBin/gitproj-init.inc
# Calls: fInitSetGlobals

while getopts :al:s:mfhH:qvV:xX: tArg; do
    case $tArg in
        # Script arguments
        a) gpAuto=1 ;;
        l) gpLocalTopDir="$OPTARG" ;;
        s) gpMaxSize=="$OPTARG" ;;
        m) gpMove=1 ;;
        f) gpGitFlow=1 ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        q) gpVerbose=0 ;;
        v) gpVerbose=2 ;;
        V) gpVerbose=$OPTARG" ;;
        x) let ++gpDebug ;;
        X) gpDebug=$OPTARG" ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

# ----------
fInitCreateLocalGit
exit 0
