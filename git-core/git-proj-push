#!/bin/bash

export gpCmdName gpBin

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-push -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj push

=head1 SYNOPSIS

    git proj push [-g] [-d] [-a] [-y|-n] [common-options]

=head1 DESCRIPTION

 rsync will be used top copy the '[ProjName]/raw/' files to
 [remote-raw-origin]/[ProjName].raw.

=head1 OPTIONS

=over 4

=item B<-g>

If the -g option is given then run:

 "git push origin [current-branch]"

=item B<-d>

If the -d option is used, then the remote raw/ will be made identical
to the local raw/. I.e. files might be deleted from the remote raw/.

See the EXAMPLES section for a "safe" way to use this option.

=item B<-a>

This turns on automated push for raw/ files. Use the -y or -n to
select the action. -n will just display what would be done.

If there is a -d option, that will be removed and the -n option
will be added. -d could be very destructive, so it needs to be
run interactively.

=item B<-y|-n>

If -y, then push files to the remote raw/

If -n, then just show what would be pushed to the remote raw/

Default: -n

=item B<[common-options]>

 -h
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)

Run "git proj -h" for details.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=head1 EXAMPLES

The rsync (and rclone) updates of the files in raw/ are not versioned, so
be very careful with the -d option; files will be permanently deleted.

For a "safe" way, of updating the files in raw/, is to do a "push",
then "pull" with no -d. Then manually remove files you don't want in
the local raw/. Now run "push" with -d, to update the remote raw/

For example:

    cd PROJ
    mount REMOTE-DRIVE

    # Update remote with all local raw/ files
    git proj push

    # Get all remote raw/ files
    git proj pull

    # Review and remove fiies from local, preparing for permanent removal
    cd raw
    rm FILES

    # Remove raw/ files from remote, that are not in local raw/ dir
    git proj push -d

Note: Because is is so destructive, the -d option cannot be used with
the -a option. Also the -y option will be ignored--you must answer the
"delete?" prompt.

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj init
 git proj remote
 git proj clone
 git proj add
 git proj push
 git proj pull
 git proj config
 git proj status
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
} # fUsage

# ========================================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

. $gpBin/gitproj-push.inc
fComGetProjGlobals

tSrc=${BASH_SOURCE##*/}
pBranchFlag=0
pDeleteRaw=0
gpYesNo="No"
gpAuto=0
while getopts :adgnyhH:qvV:xX: tArg; do
    case $tArg in
        # Script arguments
        a) gpAuto=1 ;;
        d) pDeleteRaw=1 ;;
        g) pBranchFlag=1 ;;
        n) gpYesNo=No ;;
        y) gpYesNo=Yes ;;
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        q) gpVerbose=0 ;;
        v) gpVerbose=2 ;;
        V) gpVerbose=$OPTARG ;;
        x) let ++gpDebug ;;
        X) gpDebug=$OPTARG ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi
if [[ ${gpAuto:-0} -ne 0 && $pDeleteRaw -ne 0 ]]; then
    pDeleteRaw=0
    gpYesNo=No
    fLog -f -p warning -m "-d cannot be used with -a. Removing -d option and adding -n option." -l $tSrc:$LINENO
fi

# ----------
fPushToOrigin $pBranchFlag $pDeleteRaw
exit 0
