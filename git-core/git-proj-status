#!/bin/bash

export gpCmdName gpBin gpShort

#--------------------
fUsage()
{
    # Quick help, run this:
    # git-proj-init -h | less

    local pStyle="${1:-usage}"

    fComUsage -s $pStyle -f $gpBin/$gpCmdName
    exit 1

    cat <<\EOF >/dev/null
=pod

=for text ========================================

=for html <hr/>

=head1 NAME git proj status

=head1 SYNOPSIS

 git proj status [-g "pGitOpt"] [-r "pRawOpt"] [common-options]

=head1 DESCRIPTION

    Do a "git status"
    Verify gitproj.config.remote-raw-origin is defined and mounted.

    Verify origin is set to a path that exists (if mounted).

    Give a "diff" (-qr) of the raw files, local vs remote (if mounted)

=head1 OPTIONS

=over 4

=item B<-g "pGitOpt">

Git status options. For example to give a "short" status and show
ignored files, use::

    git proj status -g "-s --ignored"

=item B<-r "pRawOpt">

Raw options. Currently these options will be passed to the diff
command. For example to show the files that are the same between local
and remote:

    git proj status -r "-s"

=item B<[common-options]>

 -h
 -H usage|text|html|md|man|int|int-html|int-md
 -q, -v, -V N     (gpVerbose)
 -x, -xx..., -X N (gpDebug)

Run "git proj -h" for details. Or "man git-proj" for help with all the
sub-commands.

=back

=head1 RETURN VALUE

 0 - if OK
 !0 - if errors

=for comment =head1 ERRORS

=head1 EXAMPLES

=for comment=head1 ENVIRONMENT

=for comment=head1 FILES

=head1 SEE ALSO

 git proj
 git proj init
 git proj remote
 git proj clone
 git proj push
 git proj pull
 git proj add   TODO
 git proj config TODO
 git flow

=for comment =head1 NOTES

=for comment =head1 CAVEATS

=for comment =head1 DIAGNOSTICS

=for comment =head1 BUGS

=for comment =head1 RESTRICTIONS

=head1 AUTHOR

TurtleEngr

=head1 HISTORY

GPLv3 Copyright 2021 by TurtleEngr

=cut

EOF
}

# ========================================
# Main

export gpBin gpCmdName tSrc

gpCmdName=${BASH_SOURCE##*/}
tSrc=${BASH_SOURCE##*/}

# -------------------
# Set current directory location in PWD
if [ -z "$PWD" ]; then
    PWD=$(pwd)
fi

# -------------------
# Define the location of this script
gpBin=${0%/*}
if [ "$gpBin" = "." ]; then
    gpBin=$PWD
fi
cd $gpBin >/dev/null 2>&1
gpBin=$PWD
cd - >/dev/null 2>&1

# -------------------
. $gpBin/gitproj-com.inc
# Calls: fComSetGlobals

. $gpBin/gitproj-status.inc
# Calls: fComGetProjGlobals

tSrc=${BASH_SOURCE##*/}
pGitOpt=""
pRawOpt=""
while getopts :g:r:hH:qvV:xX: tArg; do
    case $tArg in
        g) pGitOpt="$pGitOpt $OPTARG" ;;
        r) pRawOpt="$pRawOpt $OPTARG" ;;
        # Script arguments
        # Common arguments
        h) fUsage long ;;
        H) fUsage "$OPTARG" ;;
        q) gpVerbose=0 ;;
        v) gpVerbose=2 ;;
        V) gpVerbose=$OPTARG ;;
        x) let ++gpDebug ;;
        X) gpDebug=$OPTARG ;;
        # Problem arguments
        :) fError -m "Value required for option: -$OPTARG" -l $tSrc:$LINENO ;;
        \?) fError -m "Unknown option: $OPTARG" -l $tSrc:$LINENO ;;
    esac
done
shift $((OPTIND - 1))
if [ $# -ne 0 ]; then
    fError -m "Unknown option: $*" -l $tSrc:$LINENO
fi

# ----------
fStatusOutput "$pGitOpt" "$pRawOpt"
exit 0
