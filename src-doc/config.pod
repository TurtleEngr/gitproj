=pod

=head1 gitproj Configuration Documentation

=head1 Precedence

There are over 20 config variables for managing the git-proj
subcommands. Their "scope" is defined by the file they are
in. Definitions "closer" to the project directory have higher
precedence. Think of this as a sieve, with variables looked for in the
following order, where the last definition wins.

       Scope           Access    Locaton
    1. System          --file    /etc/gitconfig
       gitproj, global --file    /usr/share/doc/config/gitconfig
    2. Global, user    --global  ~/.gitconfig
       gitproj, local  --file    PROJ/.gitproj
    3. Local, proj     --local   PROJ/.git/config
    4. Worktree        --file    PROJ/.git/config.worktree

If the "Access" is defined for "set" or "get", then that is the only
location "git config" will use.

git-proj doesn't do anything with ".git/config.worktree".

=head2 System, /etc/gitconfg

    /etc/gitconfg

Currently gitproj does not do anything with this file. Variables that
should be set for all users on a system can be put in this file. Since
gitproj defines all of the gitproj variables in a user's ~/.gitconfig,
the /etc/gitconfig changes will not have any impact on the gitproj
variables.

=head2 gitproj, global, /usr/share/doc/git-proj/config/gitconfig

    L</usr/share/doc/git-proj/config/gitconfig|../config/gitconfig>

gitproj default variable values for all users and projects are defined
in this file. The values are only copied at selected times and unless
specified, they will only add missing vars, not changing user or
project vars.

This file is mainly used when creating an initial project with S<"git
proj init"> or S<"git proj clone">. It is also used by S<"git proj
config">.

The /usr/share/doc/git-proj/config/gitconfig file is not used directly
by "git config".  It is only used to setup the ~/.gitconfig file.

When a new version of gitproj is installed, new vars and new default
values may be added. Package manager options can be used to replace or
keep the existing config file (see man dpkg --force-confdef,
--force-confnew, or --force-confold).

    [core]
        # These options work will between Linux and Windows
        filemode = true
        autocrlf = false
        ignorecase = true
        excludesFile = ~/.gitignore
        logAllRefUpdates = true
        quotePath = false
        trustctime = false
    [user]
        # This is required!
        name = YourName
        email = YourEmail@example.com
    [alias]
        # Add, remove, or change these
        br = branch
        br-all = branch -r
        ci = commit
        co = checkout
        df = diff
        origin = config --get remote.origin.url
        raw-origin = config --get remote-raw-origin
        push-tags = push --tags origin
        revert-all = reset --hard HEAD
        st = status
        top = rev-parse --show-toplevel
        tracked = remote show origin
    [color]
        # Change if desired
        ui = never
    [branch "develop"]
        # Change if desired
        mergeoptions = --log
    [gitflow "branch"]
        master = main
        main = main
        develop = develop
    [gitflow "prefix"]
        feature = feature/
        release = release/
        hotfix = hotfix/
        bugfix = bugfix/
        support = support/
    [gitproj "config"]
        proj-status = installed
        syslog = false
        facility = user
        bin = /usr/lib/git-core
        doc = /usr/share/doc/git-proj
        git-flow-pkg = git-flow
        git-flow = true		# set by init in PROJ/.gitroj
	# The TBDs are changed when in PROJ/.gitroj and PROJ/.git/config
        local-status=TBD        # set by init and clone
        local-host=TBD          # set by init and clone
        proj-name = TBD         # set by init and clone
        remote-status=TBD       # set by remote and clone
        remote-raw-origin=TBD	# set by remote and clone
        remote-min-space = 20g  # set by remote and clone
        verbose = 2
    [gitproj "hook"]
        verbose = true
        pre-commit-enabled = true
        check-file-names = true		# only these ch in names: [-_.a-zA-z0-9]
        check-in-raw = true		# don't allow ci to PROJ/raw/?
        check-whitespace = true		# don't allow trailing spaces
        check-for-tabs = false 		# don't allow tabs for tab-ext-list
	tab-ext-list = c sh md html pod
        check-for-big-files = true	# don't allow files > binary-file-size
        binary-file-size = 10k

=head2 Global, user, --global, ~/.gitconfig

    ~/.gitconfig
    ~/.gitignore

If the ~/.gitconfig is not defined, it will be copied from
/usr/share/doc/config/gitconfig. Also if ~/.gitignore is not defined,
it will be copyied from /usr/share/doc/config/gitignore.

S<"git proj init"> and S<"git proj clone"> will update ~/.gitconfig
from /usr/share/doc/config/gitconfig, for any vars that are not
defined in ~/.gitconfig. Existing variables will not be chnaged.

=head2 gitproj, local, PROJ/.gitproj

    PROJ/.gitproj
    PROJ/.gitignore

The PROJ/.gitproj file is not used directly by "git config".  It is
only used to setup the initial PROJ/.git/config file.

S<"git proj init"> will create PROJ/.gitproj from the gitproj sections in
~/.gitconfig (also filling in "missing" vars from
/usr/share/doc/config/gitconfig). PROJ/.gitproj should be versioned,
for use by S<git proj clone>

S<"git proj clone"> will add vars from PROJ/.gitproj to PROJ/.git/config
afer the files are created. If PROJ/.gitproj is missing, it will
create it with the "init" process.

git-proj commands that change gitproj section vars in PROJ/.git/config
will also change the vars in PROD/.gitproj, so that later clones can
update PROJ/.git/config.

=head2 Local, proj, --local, PROJ/.git/config

    PROJ/.git/config

S<"git proj init"> and S<"git proj clone"> will copy all of the
vars in PROJ/.gitproj to PROJ/.git/config.

=head2 /usr/share/doc/git-proj/hooks/pre-commit, ~/.pre-commit, PROJ/.pre-commit

    L</usr/share/doc/git-proj/hooks/pre-commit|../hooks/pre-commit>
    ~/.pre-commit (optinal)
    PROJ/.pre-commit (optinal)
    PROJ/.git/hooks/pre-commit

The pre-commit hook file is created with a precidence similar to the
config vars.

S<"git proj init"> and S<"git proj clone"> will create the
PROJ/.git/hooks/pre-commit file. If PROJ/.pre-commit exists, that file
will be used. If ~/.pre-commit exits, that file will be used. And
finally the /usr/share/doc/git-proj/hooks/pre-commit file will be
used.

=head1 Config Variables and Environment Variables

These are globals and vars that effect how the script runs. Just about
all of the env. vars. that begin with "gp" can be set and exported
before the script is run. That way you can set your own defaults, by
putting them in your ~/.bashrc or ~/.bash_profile files.

Global variable precedence (the last one to set the gp variable,
wins).  (Internally, this is not implemented in this order, but this
is the logical result.)

 * internal hardcoded default
 * variable in ~/.gitconfig
 * variable in PROJ/.git/config
 * env. var.
 * command line option

=head2 Notation: gp[Var]; -[A]; git.config.[var]; (default)

=head2 gpSysLog; -NA; gitproj.config.syslog; (false)

If set to 0, log messages will only be sent to stderr.

If set to 1, log messages will be sent to stderr and syslog.

Default: false

=head2 gpFacility; -NA; gitproj.config.facility; (user)

Log messages sent to syslog will be sent to the "facility" specified
by by gpFacility.

"user" log messages will be sent to /var/log/user.log, or
/var/log/syslog, or /var/log/messages.log

See: fLog

Default: user

Allowed facility names:

 local0 through local7 - local system facilities
 user - misc scripts, generic user-level messages
 auth - security/authorization messages
 authpriv - security/authorization messages (private)
 cron - clock daemon (cron and at)
 daemon - system daemons without separate facility value
 ftp - ftp daemon
 kern - kernel  messages  (these  can't be generated from user processes)
 lpr - line printer subsystem
 mail - mail subsystem
 news - USENET news subsystem
 syslog - messages generated internally by syslogd(8)
 uucp - UUCP subsystem

These are some suggested uses for the localN facilities:

 local0 - system or application configuration
 local1 - application processes
 local2 - web site errors
 local3 - web site access
 local4 - backend processes
 local5 - publishing
 local6 - available
 local7 - available

=head2 gpVerbose; -q, -v, -V N; gitproj.config.verbose; (2)

 -q - gpVerbose=0
 -v - gpVerbose=2
 -v N - gpVerbose=N

 gpVerbose  = 0 - output error messages (corrections must be made)
 gpVerbose >= 1 - output warnings messages (corrections may be needed)
 gpVerbose >= 2 - output notice messages (important information)
 gpVerbose >= 3 - output info messages (give more information)

Default: 2

Normal log message:

 Command [warning, notice, info]: Message [File:LineNo](ErrCode)

Error messages (crit will exit, err might continue):

 Command [crit, err]: Error: Message [File:LineNo](ErrCode)

An internal error. This is probably a defect in the code (collect all
the output for a bug report):

 Command [crit, err]: Internal: Error: Message [File:LineNo](ErrCode)
 StackTrace:

=head2 gpDebug; -x, -X N; NA; (0)

Default: 0

There is no config variable for gpDebug.

If set to 0, all "debug" and "debug-N" level messages will be skipped.

If not 0, all "debug" level messages will be output.

If "debug-N" level is used, then if gpDebug is >= N, then the log
message will be output, otherwise it is skipped.

=head2 gpAuto; -a; NA; (false)

=head2 gpYesNo; -y; -n; NA; (No)

If gpAuto is true, then gpYesNo can be used to define default answers.

=head2 gpAutoMove; -NA; NA; (false)

=head2 gpBin; -NA; gitproj.config.bin; (/usr/lib/git-core)

The location of the executing command will override this.

=head2 gpDoc; -NA; gitproj.config.doc; (/usr/share/doc/git-proj)

If not found, then set to: $gpBin/../doc  If still not found: error.

=head2 gpCheckFileNames; -NA; gitproj.hook.check-file-names; (true)

=head2 gpCheckForBigFiles; -NA; gitproj.hook.check-for-big-files; (true)

=head2 gpCheckInRaw; -NA; gitproj.hook.check-in-raw; (true)

=head2 gpCheckWhitespace; -NA; gitproj.hook.check-whitespace; (true)

See rm-trailing-sp to fix.

=head2 gpAllowTabs; -NA; gitproj.hook.allow-tabs; (false)

See rm-trailing-sp to fix (-t option)

=head2 gpHookVerbose; -NA; gitproj.hook.verbose; (true)

=head2 gpPreCommitEnabled; -NA; gitproj.hook.pre-commit-enable; (true)

=head2 gpMaxSize; -NA; gitproj.hook.binary-file-size; (10k)

=head2 gpRemoteMinSpace; -NA; gitproj.config.remote-min-space; (20g)

=head2 gpGitFlow; -NA; gitproj.config.flow; (true)

=cut
